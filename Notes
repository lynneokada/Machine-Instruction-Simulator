Client sends to server (via struct or strings or whatever)
	-need to check how many bytes are being read/sent

Server reads data in line by line and stored as vector<vector<string>>
Spawns client thread and begins execution based on the vector it receives
	-Client threads can spawn worker threads to perform a subset of instructions based on thread begin/end
	-Stores output in an output buffer that contains a mutex so that it can only be written to by a single worker
		-Make function to write to output buffer that uses class mutex to lock writing

Once data is all done, return output buffer line by line to the client again and signal that it is done with execution

Client receives data from output buffer and will now write it to the file to be outputted
	-need to make sure not to mix up error and output buffers (needs 2 stop flags)


Make sure to parse individual words on server side
Should convert to error checking on client side
Need to make sure all exit(1) on server side is converted to send data back to client


Behavior still unknown:
	-what is backlog on TCPSocketServer?
	-Not sure whether or not to make spawnWorker and spawnClient or just spawnWorker for both
	-Client OOP?
	-Time between sending/receiving on the client (should we have a sleep function?)
	-How would handling multiple threads on the same functions (spawnClientWorker) work

Ask Tyler:
	-Using pointer for variable vectors (eg mathVars)
	-Making new MIS object for THREAD_BEGIN - seems ok but there could be better implementations
	-Why the fuck does cout make our receive work - receive is reading faster than transmit is sending data

11/26 Notes:
-Maybe do a try catch of the mis.run() to prevent exit(failure)?
-Need to join all client threads running on the server
-In the case of unlock need to make sure we are storing names of threads somewhere - store as ints
-Are we checking if a variable is already created?
-Maybe make serverClientThread or something to encapsulate MIS vs Client threads?
-Thread object may be useless since have to build workaround functions anyways
-Error handling for when client disconnected from server

11/28 Notes:
-Convert all bufferr->push_backs to bufferWrite(buffer, message)
-Server shouldn't take in any args (can't synchronize port numbers on both executables of client and server)